<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mongo="http://www.springframework.org/schema/data/mongo"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo-1.5.xsd">
	
	<!-- General configuration -->
	
	<context:component-scan base-package="be.seriousbusiness.brusselnieuws.rss.datastore.mongodb"/>
	
	<!-- Mongo configuration -->
	
	<context:property-placeholder location="classpath:properties/brusselnieuws-rss-datastore-mongodb-mongo.properties" ignore-unresolvable="true"/>
	
	<import resource="classpath:config/brusselnieuws-rss-datastore-mongodb-dozer-config.xml"/>
	
	<mongo:mongo host="${mongo.host}" port="${mongo.port}">
		<mongo:options connections-per-host="${mongo.connectionsPerHost}"
			threads-allowed-to-block-for-connection-multiplier="${mongo.threadsAllowedToBlockForConnectionMultiplier}" 
			connect-timeout="${mongo.connectTimeout}"
			max-wait-time="${mongo.maxWaitTime}"
			auto-connect-retry="${mongo.autoConnectRetry}"
			socket-keep-alive="${mongo.socketKeepAlive}"
			socket-timeout="${mongo.socketTimeout}"
			slave-ok="${mongo.slaveOk}" 
			write-number="1" 
			write-timeout="0" 
			write-fsync="true"/>
  	</mongo:mongo>
  	
  	<mongo:db-factory id="mongoDbFactory" 
  		mongo-ref="mongo" 
  		host="${mongo.host}" 
  		port="${mongo.port}"
  		dbname="${mongo.dbname}" 
  		username="${mongo.username}" 
  		password="${mongo.password}"/>
  		
  	<!-- 
  	writeResultChecking :
  	When in development it is very handy to either log or throw an exception 
  	if the com.mongodb.WriteResult returned from any MongoDB operation contains an error. 
  	It is quite common to forget to do this during development and then end up with an application 
  	that looks like it runs successfully but in fact the database was not modified according to your expectations. 
  	Set MongoTemplate’s property to an enum with the following values, LOG, EXCEPTION, or NONE 
  	to either log the error, throw and exception or do nothing. 
  	The default is to use a WriteResultChecking value of NONE. 
  	
  	writeConcern: <property name="writeConcern" value="NORMAL"/>
  	You can set the com.mongodb.WriteConcern property that the MongoTemplate will use for write operations 
  	if it has not yet been specified via the driver at a higher level such as com.mongodb.Mongo. 
  	If MongoTemplate’s WriteConcern property is not set it will default to the one set in the MongoDB driver’s DB 
  	or Collection setting.
  	-->
  		
  	<bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate"> 
		<constructor-arg name="mongoDbFactory" ref="mongoDbFactory"/>
		<property name="writeResultChecking" value="LOG"/>
	</bean>
	
	<!-- Repository configuration -->

	<mongo:repositories base-package="be.seriousbusiness.brusselnieuws.rss.datastore.mongodb.repository" />
	
	<!-- DAO configuration -->
	
	<bean id="mongoMediumTypeDAO" class="be.seriousbusiness.brusselnieuws.rss.datastore.mongodb.controller.MongoMediumTypeDAO" scope="singleton"/>
	<bean id="mongoMediumDAO" class="be.seriousbusiness.brusselnieuws.rss.datastore.mongodb.controller.MongoMediumDAO" scope="singleton"/>
	<bean id="mongoAuthorDAO" class="be.seriousbusiness.brusselnieuws.rss.datastore.mongodb.controller.MongoAuthorDAO" scope="singleton"/>
	<bean id="mongoCategoryDAO" class="be.seriousbusiness.brusselnieuws.rss.datastore.mongodb.controller.MongoCategoryDAO" scope="singleton"/>
	<bean id="mongoArticleDAO" class="be.seriousbusiness.brusselnieuws.rss.datastore.mongodb.controller.MongoArticleDAO" scope="singleton"/>
	<bean id="mongoFeedDAO" class="be.seriousbusiness.brusselnieuws.rss.datastore.mongodb.controller.MongoFeedDAO" scope="singleton"/>

</beans>
